<?php

/**
 * Increase module weight to be bigger than Commerce Pricing Attributes * module. It will allow to have an access to corresponding fields from
 * our module.
 */

/**
 * Implements hook_entity_info_alter().
 */
function fck_custom_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['modal_product_detail'] = array(
    'label' => t('Modal Product Detail'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_update_7001().
 */
function fck_custom_update_7001() {     
  db_update('system')->fields(array(
    'weight' => 100
  ))
  ->condition('name', 'fck_custom')
  ->execute();
}


/**
 * Implements hook_form_jersey_print_form_alter().
 */
function fck_custom_form_jersey_print_form_alter(&$form, &$form_state) {
  $form['#theme'] = 'jersey_print_form';  
} 

/**
 * Implements hook_theme().
 */
function fck_custom_theme($existing, $type, $theme, $path) {	
	return array(    
    'jersey_print_form' => array(
      'render element' => 'form',
      'template' => 'jersey-print-form',
    ),
  );
}

/**
 * Implements hook_init().
 */
function fck_custom_init() {
  ctools_include('ajax');
  ctools_include('modal');
}

/**
 * Implements hook_menu().
 */
function fck_custom_menu() {  
  $items['fck_preview/%'] = array(
    'title' => 'Preview title',
    'page callback' => 'fck_preview_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,    
  );
  $items['fck_preview/%/%/%'] = array(
    'title' => 'Preview title',
    'page callback' => 'fck_preview_page',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,    
  );

  return $items;
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function fck_custom_commerce_checkout_pane_info_alter(&$panes) {
  foreach($panes as $key => $pane) {
    $panes[$key]['title'] = t($panes[$key]['title']);
  }
}

/**
 * Implements hook_commerce_cart_attributes_refresh_alter().
 */
function fck_custom_commerce_cart_attributes_refresh_alter(&$commands, $form, $form_state) {	
	// should work only for "node_full" view mode
	if ($form_state['build_info']['args'][2]['view_mode'] != 'node_full') {
		return;
	}	
  // save current form states after switching Size select list. Otherwise all fields will be refreshed: prices, pricing attributes etc.
  $refresh_commands = commerce_pricing_attributes_add_to_cart_form_attributes_refresh($form, $form_state);  
  $commands[] = $refresh_commands['#commands'][0];
  
  // ------------------------------------------
  // hold "Jersey print" price labels on places after switching between options of
  // Size attribute (AJAX callback)
  // ------------------------------------------
  if (isset($form_state['commerce_option'])) {
    // options data (option prices, currencies)
    $option_data = $form_state['default_product']->field_jersey_print['und'][0]['set_details'];    
    // states of form fields
    $option_values = $form_state['commerce_option']['field_jersey_print'][0]['option'];    
    // badge data
    $badge_options = $option_data['field_superliga_badge']['options'];
    // update Badge info if it's filled
    $badge_value = $option_values->field_superliga_badge['und'][0]['value'];
  	if ($badge_value) {
  		$price = commerce_currency_format($badge_options[$badge_value]['price'], $badge_options[$badge_value]['currency_code']);
  		$price = '+'.$price;
  			$commands[] = ajax_command_invoke(
  	    '.e-badge-value', 
  	    'text', 
  	    array($price)
  	  );
  	}
  	// badge data
    $autograph_options = $option_data['field_autograph']['options'];
    // update Badge info if it's filled
    $autograph_value = $option_values->field_autograph['und'][0]['value'];
  	if ($autograph_value) {
  		$price = commerce_currency_format($autograph_options[$autograph_value]['price'], $autograph_options[$autograph_value]['currency_code']);
  		$price = '+'.$price;
  			$commands[] = ajax_command_invoke(
  	    '.e-autograph-value', 
  	    'text', 
  	    array($price)
  	  );
  	}
  	// players data
    $players_options = $option_data['field_players']['options'];
    if (isset($option_data['field_players']) && 
      isset($option_values->field_players['und'][0])) {
  	  // update Players info if it's filled
  	  $players_value = $option_values->field_players['und'][0]['tid'];
  		if ($players_value) {
  			$price = commerce_currency_format($players_options[$players_value]['price'], $players_options[$players_value]['currency_code']);
  			$price = '+'.$price;
  				$commands[] = ajax_command_invoke(
  		    '.e-players-value', 
  		    'text', 
  		    array($price)
  		  );
  		}
  	}	
  	
  	// Text Label data
  	if (isset($option_data['field_text_label']) &&
      isset($option_values->field_text_label['und'][0])) {	  
  	  // update Text Label info if it's filled
  	  $text_label_value = $option_values->field_text_label['und'][0]['value'];

  		if ($text_label_value) {
  			$price = fck_custom_get_custom_price($text_label_value, 'label');
  			$price = '+'.$price;
  				$commands[] = ajax_command_invoke(
  		    '.e-text-label-value', 
  		    'text', 
  		    array($price)
  		  );
  		}
  	}		
  	// Text Number data
  	if (isset($option_data['field_text_number']) &&
      isset($option_values->field_text_number['und'][0])) {
  	  //$text_number_options = $option_values['field_text_number']['options'];
  	  // update Text Number info if it's filled
  	  $text_number_value = $option_values->field_text_number['und'][0]['value'];
  		if ($text_number_value) {
  			$price = fck_custom_get_custom_price($text_number_value, 'number');
  			$price = '+'.$price;
  				$commands[] = ajax_command_invoke(
  		    '.e-text-number-value', 
  		    'text', 
  		    array($price)
  		  );
  		}	  
  	}
  }
}

/**
 * Implements hook_preprocess_jersey_print_form() 
 */
function fck_custom_preprocess_jersey_print_form(&$variables) {   
  $form = &$variables['form'];  
  $preview_text_fid = $form['preview_text_fid']['#value'];
  $preview_badge_fid = $form['preview_badge_fid']['#value'];
  $preview_autograph_fid = $form['preview_autograph_fid']['#value'];

  $variables['preview_text_button'] = "<a id='jerseyPrintTextPreview' class='fck_jersey_print_preview twitter_bootstrap_modal tb_modal bs_modal pull-right' href='/fck_preview/$preview_text_fid'>".t('Preview Text')."</a>";
  $variables['preview_badge_button'] = "<a id='jerseyPrintBadgePreview' class='fck_jersey_print_preview twitter_bootstrap_modal tb_modal bs_modal pull-right' href='/fck_preview/$preview_badge_fid'>".t('Preview Badge')."</a>";
  $variables['preview_autograph_button'] = "<a id='jerseyPrintAutographPreview' class='fck_jersey_print_preview twitter_bootstrap_modal tb_modal bs_modal pull-right' href='/fck_preview/$preview_autograph_fid'>".t('Preview Autograph')."</a>";

}

/**
 * Save wishlists order handler. 
 */
function fck_save_flags_submit($form, &$form_state) {  
  $product_weight = array();
  // get weight by product_id
  foreach ($form_state['values']['field_wishlist_weight_selector'] as $item) {
    $product_id = key($item['entity']);
    $product_weight[$product_id] = $item['weight'];    
  }
  // save flags manually because Views module provide Commerce 
  // product entity as main (need to be Flagging but it's unavailable 
  // in Views)
  global $user;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'flagging')
  ->entityCondition('bundle', 'wishlist_product')
  ->propertyCondition('uid', $user->uid);
  $results = $query->execute();
  foreach ($results['flagging'] as $fid => $item) {
    $flag = entity_load_single('flagging', $fid);
    $wrapper = entity_metadata_wrapper('flagging', $flag);
    $wrapper->field_wishlist_weight->set($product_weight[$flag->entity_id]);
    $wrapper->save();    
  }  
  drupal_set_message(t('The changes have been haved'));
}

/**
 * Override commerce_stock_add_to_cart_validate() to work only for Add to cart button (block wishlists buttons)
 */
function fck_stock_add_to_cart_validate($form, &$form_state) {  
  if ($form_state['submitted'] && $form_state['clicked_button']['#parents'][0] == 'submit') {
    // Get product and quantity.
    $qty = $form_state['values']['quantity'];
    $product_id = $form_state['values']['product_id'];
    $product = commerce_product_load($product_id);
    $qty_ordered = commerce_stock_check_cart_product_level($product_id);
    // Check using rules.
    commerce_stock_check_product_rule($product, $qty, $qty_ordered, $stock_state, $message);
    // Action.
    if ($stock_state == 1) {
      form_set_error("stock_error", $message);
      // emulate Size change event
      // get size attribute field name
      $size_attribute = fck_product_form_get_size_attribute($form);
      // get dom id from size attribute field name
      $size_attribute_dom_id = '#edit-attributes-' . str_replace('_', '-', $size_attribute);

      // force AJAX refreshing all product attributes
      drupal_add_js('jQuery(document).ready(function () { $("'.$size_attribute_dom_id.'").trigger("change"); });', 'inline');
    }
    elseif ($stock_state == 2) {
      $form_state['values']['quantity'] = $qty;
      drupal_set_message($message);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function fck_custom_form_alter(&$form, &$form_state, $form_id) {   
  if ($form_id == 'views_form_wishlist_product_page') {    
    $form['#submit'][] = 'fck_save_flags_submit';
  }
  elseif (isset($form_state['build_info']['base_form_id']) && 
    $form_state['build_info']['base_form_id'] == 'commerce_cart_add_to_cart_form') {    

    // override default stock validation handler because it works even if click on Add/Remove Wishlist buttons
    if (isset($form['#validate'][1]) && $form['#validate'][1] == 'commerce_stock_add_to_cart_validate') {
      $form['#validate'][1] = 'fck_stock_add_to_cart_validate';
    }

    global $user;
    // show wishlist button only for authenticated users
    if (user_is_logged_in()) {
      $form['wishlist'] = array(
        '#type' => 'submit',        
        '#submit' => array('fck_wishlist_modal_submit'),            
        '#attributes' => array('class' => array('awe-button', 'product-quick-whistlist', 'has_wishlist')),
      );
      $product_id = $form['product_id']['#value'];
      //$product_nid = $form_state['context']['entity_id'];
      $flag = flag_get_flag('wishlist_product');      
      $is_flagged = $flag->is_flagged($product_id, $user->uid);
      $form['wishlist']['#value'] = $is_flagged ? t('Remove Wishlist') : t('Add Wishlist');
    }    
    


    // add AJAX modal close handlers for "Add to cart" & "Wishlist" buttons
    if ($form_state['build_info']['args'][2]['view_mode'] == 'node_modal_product_detail') {       
      
      // make a copy of 2 submit buttons: Wishlist and Add to cart and bind ajax callback to them that close modal and reload page. It must be done to avoid ajax system error that cause on Product detail page after user closes modal and switches between sizes.

      //$form['wishlist']['#ajax']['callback'] = 'fck_close_modal_callback';  
      $form['submit_modal'] = $form['submit'];
      $form['submit']['#access'] = FALSE;
      $form['submit_modal']['#ajax'] = array(
        'callback' => 'fck_close_modal_callback',        
      );

      if (user_is_logged_in()) {        
        //$form['wishlist']['#ajax']['callback'] = 'fck_close_modal_callback';                
        $form['wishlist_modal'] = $form['wishlist'];
        $form['wishlist']['#access'] = FALSE;        
        $form['wishlist_modal']['#ajax']['callback'] = 'fck_close_modal_callback';        
      }          
    }    

    // if product_id is passed - select proper product variant.
    // Only works for node_full view mode.
    if ($form_state['build_info']['args'][2]['view_mode'] == 'node_full') {           
      // pay attention that if only one attribute is left and other has been sold - 'attributes' field won't be shown
      if (isset($_GET['size']) && isset($form['attributes'])) {
        // get size attribute field name
        $size_attribute = fck_product_form_get_size_attribute($form);
        // get dom id from size attribute field name
        $size_attribute_dom_id = '#edit-attributes-' . str_replace('_', '-', $size_attribute);

        // force AJAX refreshing all product attributes
        drupal_add_js('jQuery(document).ready(function () { $("'.$size_attribute_dom_id.'").trigger("change"); });', 'inline');

        $product_id = $_GET['size'];
        // setup product id for hidden field
        $form['product_id']['#value'] = $product_id;              
        // setup product id for select list (to make it visible on form).
        // in Commerce select list has different row of ids than product id.
        // they = 100, 101, 102, etc. To make proper order we need to parse
        // form_id value that contain row of product variants in proper order..
        // f.x. commerce_cart_add_to_cart_form_352_351 where [352_351] product ids 
        // and in this case select list has 100, 101 values.
        $product_ids = str_replace('commerce_cart_add_to_cart_form_', '', $form['form_id']['#value']);        
        $product_ids = explode('_', $product_ids);
        $product_key = array_search($product_id, $product_ids);            
        $option_ids = array_keys($form['attributes'][$size_attribute]['#options']);
        if (isset($option_ids[$product_key])) {
          $option_key = $option_ids[$product_key];
          // change value in attribute select list
          $form['attributes'][$size_attribute]['#default_value'] = $option_key;
          $form['unchanged_attributes'][$size_attribute]['#value'] = $option_key;
        }
        
      }
    }       
  }

  if (isset($form_state['build_info']['base_form_id']) && 
    $form_state['build_info']['base_form_id'] == 'commerce_cart_add_to_cart_form' &&
    isset($form['field_jersey_print'])) {   

  	// hide Jersey print attributes for Teaser and Modal view modes. Override handler  
  	// of 'Add to cart' button - it should redirect to full node page instead of 
  	// adding product to cart.
    $view_mode = $form_state['build_info']['args'][2]['view_mode']; 
  	//node_full

    if ($view_mode == 'node_modal_product_detail') {
  		if (isset($form['field_jersey_print'])) {
  			unset($form['field_jersey_print']);

  			$form['submit']['#value'] = t('Add Prints');
        if (isset($form['submit_modal'])) {
          $form['submit_modal']['#value'] = t('Add Prints');
        }


  			$form['#submit'][0] = 'fck_custom_jersey_print_redirect';
        return;
  		}
  	}    

    $form['#theme'] = 'jersey_print_form';
  	
    // fix a bug with wrong prices in Cart popup - force price 
    // recalculation that happens only after visiting Cart page
    $form['#submit'][] = 'fck_custom_recalculate_sellprice_submit';
  	// get Text fid (link is generated in template)
  	$preview_text_fid = '';
  	if (isset($form_state['default_product']->field_text_preview_image['und'])) {
	  	$preview_text_fid = $form_state['default_product']->field_text_preview_image['und'][0]['fid'];
	  	$preview_text_fid = empty($preview_text_fid) ? '-' : $preview_text_fid;
		}
  	$form['preview_text_fid'] = array('#value' => $preview_text_fid);
  	// get Badge preview fid (link is generated in template)
  	$preview_badge_fid = '';
  	if (isset($form_state['default_product']->field_badge_preview_image['und'])) {
	  	$preview_badge_fid = $form_state['default_product']->field_badge_preview_image['und'][0]['fid'];
	  	$preview_badge_fid = empty($preview_badge_fid) ? '-' : $preview_badge_fid;
		}
  	$form['preview_badge_fid'] = array('#value' => $preview_badge_fid);
  	// get Autograph preview fid (link is generated in template)
  	$preview_autograph_fid = '';
  	if (isset($form_state['default_product']->field_autograph_preview_image['und'])) {
	  	$preview_autograph_fid = $form_state['default_product']->field_autograph_preview_image['und'][0]['fid'];
	  	$preview_autograph_fid = empty($preview_autograph_fid) ? '-' : $preview_autograph_fid;
		}
  	$form['preview_autograph_fid'] = array('#value' => $preview_autograph_fid);

  	drupal_add_js(drupal_get_path('module', 'fck_custom') . '/jersey_print_preview.js');
  	drupal_add_css(drupal_get_path('module', 'fck_custom') . '/jersey_print_preview.css');  	  	

  	$field_badge = &$form['field_jersey_print'][0]['field_superliga_badge']['und'];
  	$field_autograph = &$form['field_jersey_print'][0]['field_autograph']['und'];
  	$field_players = &$form['field_jersey_print'][0]['field_players']['und'];
  	$field_badge['#suffix'] = "";
  	$field_autograph['#suffix'] = "";
  	$field_players['#suffix'] = "";    

    // Superliga badge autoselect (used with wishlist links)
    if (isset($_GET['badge'])) {
      $field_badge['#default_value'] = TRUE;
    }
    // Autograph autoselect (used with wishlist links)
    if (isset($_GET['autograph'])) {
      $field_autograph['#default_value'] = TRUE;
    }
    // Players autoselect (used with wishlist links)
    if (isset($_GET['player'])) {
      $field_players['#default_value'] = $_GET['player'];
    }

    // make "- None -" option translatable
    //$field_players['#options']['_none'] = t($field_players['#options']['_none']);

    // By default textfield pricing attributes don't refresh 
    // price during texting.. so the code below fix this problem
    if (isset($form['field_jersey_print'][0]['field_text_number']['und'])) {
      $field_text_number = &$form['field_jersey_print'][0]['field_text_number']['und'];
      $field_text_number[0]['value']['#ajax'] = $field_text_number['#ajax'];
      $field_text_number[0]['value']['#ajax']['event'] = 'finishedinput'; // 'change'
      $field_text_number[0]['value']['#attached']['js'] = array(
        drupal_get_path('module', 'fck_custom').'/field_text_number.js',
      );      
      
    	$label_text = '-';
    	$number_text = '-';

    	if (!empty($form_state['input'])) {
    		$label_input_value = $form_state['input']['field_jersey_print'][0]['field_text_label']['und'][0]['value'];
    		if (!empty($label_input_value)) {
    			$label_text = $label_input_value;
    		}
    		$number_input_value = $form_state['input']['field_jersey_print'][0]['field_text_number']['und'][0]['value'];
    		if (!empty($number_input_value)) {
    			$number_text = $number_input_value;
    		}
    	}      

      $field_text_number[0]['value']['#attributes'] = $field_text_number['#attributes'];
      unset($field_text_number['#ajax']);
      unset($field_text_number['#attributes']);

      // Text Number autoselect (used with wishlist links)
      if (isset($_GET['number'])) {
        $field_text_number[0]['value']['#default_value'] = $_GET['number'];
      }
    }
    //
    if (isset($form['field_jersey_print'][0]['field_text_label']['und'])) {
      $field_text_label = &$form['field_jersey_print'][0]['field_text_label']['und'];
      $field_text_label[0]['value']['#suffix'] = "";
      $field_text_label[0]['value']['#ajax'] = $field_text_label['#ajax'];
      $field_text_label[0]['value']['#ajax']['event'] = 'finishedinput'; // 'change'
      $field_text_label[0]['value']['#attached']['js'] = array(
        drupal_get_path('module', 'fck_custom').'/field_text_label.js',
      );
      $field_text_label[0]['value']['#attributes'] = $field_text_label['#attributes'];
      unset($field_text_label['#ajax']);
      unset($field_text_label['#attributes']);    
      
      // Text Label autoselect (used with wishlist links)
      if (isset($_GET['label'])) {
        $field_text_label[0]['value']['#default_value'] = $_GET['label'];
      }
    }        
  }
}

/**
 * Implements hook_commerce_pricing_attributes_refresh_prepare_alter().
 */
function fck_custom_commerce_pricing_attributes_refresh_prepare_alter(&$commands, &$commerce_option_list, $form, $form_state) {
  // There's a logic between reseting Player field and Label/Number
  // during AJAX execution including Price reset. If Player field is selected 
  // and Label/Number fields are edited - the Player field should be reset. 
  // And when Label/Number fields are having some values and Player field is 
  // selected - first ones should be reset.  
  $product = &$form_state['default_product'];
  if (!isset($form_state['triggering_element']['#name'])) {
    return;
  } elseif (strpos($form_state['triggering_element']['#name'], 'field_superliga_badge') !== FALSE) {   
  	// setup Preview Price for Badge      	 
  	$value = $form_state['triggering_element']['#value'];
  	$badge_options = $form_state['triggering_element']['#entity']->set_details['field_superliga_badge']['options'][1];
  	$price = commerce_currency_format($badge_options['price'], $badge_options['currency_code']);

  	if ($value) {
  		$value = '+'.$price;
  	} else {
  		$value = '';
  	}

  	$commands[] = ajax_command_invoke(
      '.e-badge-value', 
      'text', 
      array($value)
    );

  } elseif (strpos($form_state['triggering_element']['#name'], 'field_autograph') !== FALSE) {   
  	// setup Preview Price for Badge      	 
  	$value = $form_state['triggering_element']['#value'];
  	$autograph_options = $form_state['triggering_element']['#entity']->set_details['field_autograph']['options'][1];
  	$price = commerce_currency_format($autograph_options['price'], $autograph_options['currency_code']);

  	if ($value) {
  		$value = '+'.$price;
  	} else {
  		$value = '';
  	}

  	$commands[] = ajax_command_invoke(
      '.e-autograph-value', 
      'text', 
      array($value)
    );

  } elseif (strpos($form_state['triggering_element']['#name'], 'field_players') !== FALSE) {                  
  	// reset custom Label/Number and Preview Link
    $commerce_option_list[0]
      ->field_text_number['und'][0]['value'] = '';   
    $commerce_option_list[0]
      ->field_text_label['und'][0]['value'] = ''; 
    $commands[] = ajax_command_invoke(
      'input[id*="field-text-number"]', 
      'val', 
      array('')
    ); 
    $commands[] = ajax_command_invoke(
      '.e-text-label-value', 
      'text', 
      array('')
    );
    $commands[] = ajax_command_invoke(
      'input[id*="field-text-label"]', 
      'val', 
      array('')
    );
    $commands[] = ajax_command_invoke(
      '.e-text-number-value', 
      'text', 
      array('')
    );
    // generate popup preview link
    //$commands[] = _jerseyprint_preview_link_command($product, $commerce_option_list);
    // show Price for Players        
    $value = $form_state['triggering_element']['#value'];
  	$players_options = $form_state['triggering_element']['#entity']->set_details['field_players']['options'];
  	// get first taxonomy element. TODO: check if it's not _none
  	unset($players_options['_none']);
  	$players_options = $players_options[key($players_options)];
  	$price = commerce_currency_format($players_options['price'], $players_options['currency_code']);

  	if ($value !== '_none') {
  		$value = '+'.$price;
  	} else {
  		$value = '';
  	}

  	$commands[] = ajax_command_invoke(
      '.e-players-value', 
      'text', 
      array($value)
    );

  } elseif (strpos($form_state['triggering_element']['#name'], 'field_text_label') !== FALSE) {  	
  	$value = $form_state['triggering_element']['#value']; 
  	if ($value) {
  		$value = '+'.fck_custom_get_custom_price($value, 'label');
  	}
  	$commands[] = ajax_command_invoke(
      '.e-text-label-value', 
      'text', 
      array($value)
    );
  }
  elseif (strpos($form_state['triggering_element']['#name'], 'field_text_number') !== FALSE) {  	
  	$value = $form_state['triggering_element']['#value'];
  	if ($value) {
  		$value = '+'.fck_custom_get_custom_price($value, 'number');
  	}
  	$commands[] = ajax_command_invoke(
      '.e-text-number-value', 
      'text', 
      array($value)
    );
  }  
  // reset players field if custom Label/Number field are edited
  if (strpos($form_state['triggering_element']['#name'], 'field_text_number') !== FALSE ||
    strpos($form_state['triggering_element']['#name'], 'field_text_label') !== FALSE) {                  
    $commerce_option_list[0]
      ->field_players['und'][0]['tid'] = '_none';    
    $commands[] = ajax_command_invoke(
      'select[id*="field-players"]', 
      'val', 
      array('_none')
    ); 
    $commands[] = ajax_command_invoke(
      '.e-players-value', 
      'text', 
      array('')
    );    
    
    //$commands[] = _jerseyprint_preview_link_command($product, $commerce_option_list);    
  }  
}

/**
 * Generate a path of preview link depending on values of Text Number/Text Label field 
 */
function _jerseyprint_preview_link_command(&$product, &$commerce_option_list) {
	$fck_fid = $product->field_text_preview_image['und'][0]['fid'];

	$fck_label = isset($commerce_option_list[0]
    ->field_text_label['und'][0]) ? $commerce_option_list[0]
    ->field_text_label['und'][0]['value'] : '-';
  $fck_label = empty($fck_label) ? '-' : $fck_label;

  $fck_number = isset($commerce_option_list[0]
    ->field_text_number['und'][0]) ? $commerce_option_list[0]
    ->field_text_number['und'][0]['value'] : '-';
  $fck_number = empty($fck_number) ? '-' : $fck_number;  
  return ajax_command_invoke(
    '#jerseyPrintTextPreview', 
    'attr', 
    array('href', drupal_encode_path('/jquery_ajax_load/get/fck_preview/'. $fck_fid.'/'.$fck_label.'/'.$fck_number))
  );  
}

function fck_custom_get_custom_price($text, $type = 'label') {
	$coef = '';
	if ($type == 'label') {
		$coef = variable_get('fck_price_per_letter', 2000);
	} elseif ($type == 'number') {
		$coef = variable_get('fck_price_per_digit', 3500);
	}
	$currency_code = variable_get('commerce_default_currency', 'DKK');
	$price = commerce_currency_format($coef * strlen($text), $currency_code);

	return $price; 
}

/**
 * Bootstrap modal page - provide image preview 
 * modal on Jersey Print  
 */
function fck_preview_page($fid, $label_text = '', $number_text = '') {
  $page = array();
  
  drupal_add_css(drupal_get_path('module', 'fck_custom') . '/jersey_print_preview.css');    

  $file = file_load($fid);
  $uri = $file->uri;
  $url = file_create_url($uri);
  $output = '';
  $image = theme('image', array('path' => $url));   

  if (empty($label_text) && empty($number_text)) {
    $page['result']['#markup'] = $image;
    return $page;
  }

  $page['result']['#markup'] = '
    <div class="work_container" data-label-text="'.$label_text.'" data-number-text="'.$number_text.'"><div class="img_outer">
      <div class="img_container">
        '.$image.'
      </div>
      <div class="name_wrapper">
        <div id="name_inscription"></div>
      </div>
      <div id="number_inscription"></div>
      
    </div></div>';

  return $page;
}

/**
 * Redirect user to Jersey print node after clicking on "Add to cart" button (renamed * to Add print). Supposed to work only for NodeTeaser and NodeModal view modes.
 */
function fck_custom_jersey_print_redirect($form, &$form_state) {  
  $product_id = $form_state['values']['product_id'];
  $product_nid = $form_state['context']['entity_id'];  
  // generate product link to pick Size attribute
  $url = url('node/'.$product_nid, 
    array(
      'query' => array('size' => $product_id),
      'absolute' => TRUE,
    )
  );
  // redirect to product node and close modal window
  $commands[] = ctools_ajax_command_redirect($url);
  $commands[] = ctools_modal_command_dismiss();

  print ajax_render($commands);
  exit;
}

/**
 * Close ctools modal window nad reload a page.
 */
function fck_close_modal_callback($form, $form_state) {   
  $commands[] = ctools_ajax_command_reload();
  $commands[] = ctools_modal_command_dismiss();

  print ajax_render($commands);
  exit;
}

/**
 * Flag/Unflag product by form submit.
 */
function fck_wishlist_modal_submit($form, $form_state) {
  global $user;
  $product_id = $form_state['values']['product_id'];
  $product_nid = $form_state['context']['entity_id'];

  $autograph = FALSE;
  $badge = FALSE;
  $player = ''; 
  $label = ''; 
  $number = '';
  ;
  $jersey_print = '';
  if (isset($form_state['values']['field_jersey_print'])) {
    $jersey_print = &$form_state['values']['field_jersey_print'][0];    
    $player       = $jersey_print['field_players']['und'][0]['tid'];     
    $label        = $jersey_print['field_text_label']['und'][0]['value']; 
    $number       = $jersey_print['field_text_number']['und'][0]['value'];
    $badge        = $jersey_print['field_superliga_badge']['und'][0]['value'];
    $autograph    = $jersey_print['field_autograph']['und'][0]['value'];
  }

  $flag = flag_get_flag('wishlist_product');
  $is_flagged = $flag->is_flagged($product_id, $user->uid);
  if (!$is_flagged) {
    $flag->flag('flag', $product_id);
    //
    if (!empty($jersey_print)) {
      fck_jp_add_wishlist($product_id, 
        $user->uid, 
        $player, 
        $label, 
        $number, 
        $badge, 
        $autograph
      );
    }
  } else {
    $flag->flag('unflag', $product_id);
    //
    /*if (!empty($jersey_print)) {
      fck_jp_remove_wishlist($product_id, $user->uid);
    }*/
  }
  
  //
  /*$url = fck_generate_product_url(
    $product_nid, 
    $product_id, 
    $autograph, 
    $badge, 
    $player, 
    $label, 
    $number
  );*/
  //drupal_goto($url);
}

/**
 * Generate product url with parameters like size, jersey print 
 * (autograph, badge etc). Passed parameters will be picked automatically.
 * Used with Wishlist buttons and on wishlist page.
 */
function fck_generate_product_url($product_nid, $product_id = 0, $autograph = FALSE, $badge = FALSE, $player = '', $label = '', $number = '') {  
  $params = array();
  if ($product_id) {
    $params['size'] = $product_id;  
  }
  if ($autograph) {
    $params['autograph'] = $autograph;
  }
  if ($badge) {
    $params['badge'] = $badge;
  }
  if (!empty($player)) {
    $params['player'] = $player;
  }
  if ($label) {
    $params['label'] = $label;
  }
  if ($number) {
    $params['number'] = $number;
  }

  return url('node/'.$product_nid, 
    array(
      'query' => $params,
      'absolute' => TRUE,
    )
  );
}

/**
 * Recalculate cart(order) prices after clicking Add to cart button.
 * Used for JerseyPrint products because by default Cart popup has wrong 
 * price calculations (without including attributes prices)
 */
function fck_custom_recalculate_sellprice_submit($form, &$form_state) {  
  global $user;
  // Get order cart entity
  $order = commerce_cart_order_load($user->uid);  
  // Recalculate prices for each line item of the cart
  commerce_cart_order_refresh($order);  
  // update order total price
  $order = commerce_order_status_update($order, 'cart', TRUE);  
  commerce_order_save($order);  
}

/**
 * Get attribute size name from display product form (supposed that 
 * one of size attributes is setup otherwises first attributes will 
 * be return)
 */
function fck_product_form_get_size_attribute($form) {
  if (isset($form['attributes']['field_outwear_adult_size'])) {
    return 'field_outwear_adult_size';
  } elseif (isset($form['attributes']['field_outwear_children_size'])) {
    return 'field_outwear_children_size';
  } elseif (isset($form['attributes']['field_outwear_baby_size'])) {
    return 'field_outwear_baby_size';
  } elseif (isset($form['attributes']['field_foot_size'])) {
    return 'field_foot_size';
  }
  return '';
}

/**
 * Get user name by user id
 */
function fck_get_username($uid) {
  return db_select("users", "u")
  ->fields("u", array("name"))
  ->condition("uid", $uid)
  ->execute()
  ->fetchField();
}

/**
 * Get product display id by product variation id
 */
function fck_get_node_id($product) { //csf_get_referencing_node_id
  global $language;

  if (is_object($product)) {
    $product = $product->product_id;
  }  

  // get static data
  $data = &drupal_static(__FUNCTION__);
  if (isset($data[$product]) && !empty($data[$product])) {
    return $data[$product];
  }

  // Itterate thhrough fields which refer to products.
  foreach (commerce_info_fields('commerce_product_reference') as $field['field_name']) {
    // Build query.
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node', '=')
      ->fieldCondition($field['field_name'], 'product_id', $product, '=')      
      ->range(0, 1);

      
      $result = $query->execute();      
    if ($result) {
      // Return node id.      
      $nid = array_keys($result['node']);      
      return array_shift($nid);
      $data[$product] = array_shift($nid);
      return $data[$product];
    }
  }

  return FALSE;
}

/**
 * Check if Product Shop has some group; New group by default
 */
function fck_is_has_group($items, $group = 'new') {  
  foreach ($items as $item) {
    if ($item['value'] == $group) {
      return TRUE;
    }
  }
  return FALSE;
}
